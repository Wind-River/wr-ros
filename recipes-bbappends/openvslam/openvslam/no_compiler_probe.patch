diff --git a/3rd/FBoW/CMakeLists.txt b/3rd/FBoW/CMakeLists.txt
index 0a2b3d4..258c32a 100644
--- a/3rd/FBoW/CMakeLists.txt
+++ b/3rd/FBoW/CMakeLists.txt
@@ -130,143 +130,16 @@ set(EXTRA_EXE_LINKER_FLAGS "")
 set(EXTRA_EXE_LINKER_FLAGS_RELEASE "")
 set(EXTRA_EXE_LINKER_FLAGS_DEBUG "")
 
-if(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR MINGW)
-    # profiling option
-    set(ENABLE_PROFILING OFF CACHE BOOL "Enable profiling in the GCC/Clang compiler (Add flags: -g -pg)")
-    # option for omitting frame pointer
-    set(USE_OMIT_FRAME_POINTER ON BOOL "Enable -fomit-frame-pointer for GCC/Clang")
-
-    # select optimization level
-    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES arm*)
-        # ARM system
-        set(USE_O2 ON CACHE BOOL "Enable -O2 for GCC/Clang")
-        set(USE_FAST_MATH OFF CACHE BOOL "Enable -ffast-math for GCC/Clang")
-    endif()
-    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES powerpc*)
-        # PowerPC system
-        set(USE_O3 ON CACHE BOOL "Enable -O3 for GCC/Clang")
-        set(USE_POWERPC ON CACHE BOOL "Enable PowerPC for GCC/Clang")
-    endif ()
-    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES amd64* OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES x86_64*)
-        # 64bit system
-        set(USE_O3 ON CACHE BOOL "Enable -O3 for GCC/Clang")
-        set(USE_FAST_MATH OFF CACHE BOOL "Enable -ffast-math for GCC/Clang")
-        set(USE_MMX ON CACHE BOOL "Enable MMX for GCC/Clang")
-        set(USE_SSE ON CACHE BOOL "Enable SSE for GCC/Clang")
-        set(USE_SSE2 ON CACHE BOOL "Enable SSE2 for GCC/Clang")
-        set(USE_SSE3 ON CACHE BOOL "Enable SSE3 for GCC/Clang")
-        set(USE_SSE4 ON CACHE BOOL "Enable SSE4 for GCC/Clang")
-    endif()
-    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES i686* OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES x86)
-        # 32bit system
-        set(USE_O3 ON CACHE BOOL "Enable -O3 for GCC/Clang")
-        set(USE_FAST_MATH OFF CACHE BOOL "Enable -ffast-math for GCC/Clang")
-        set(USE_MMX ON CACHE BOOL "Enable MMX for GCC/Clang")
-        set(USE_SSE OFF CACHE BOOL "Enable SSE for GCC/Clang")
-        set(USE_SSE2 OFF CACHE BOOL "Enable SSE2 for GCC/Clang")
-        set(USE_SSE3 OFF CACHE BOOL "Enable SSE3 for GCC/Clang")
-        set(USE_SSE4 OFF CACHE BOOL "Enable SSE4 for GCC/Clang")
-    endif()
-    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES aarch64*)
-        # aarch64 system
-        set(USE_O2 ON CACHE BOOL "Enable -O2 for GCC/Clang")
-        set(USE_FAST_MATH OFF CACHE BOOL "Enable -ffast-math for GCC/Clang")
-        set(USE_AVX OFF CACHE BOOL "Enable AVX for GCC/Clang" FORCE)
-        set(USE_MMX OFF CACHE BOOL "Enable MMX for GCC/Clang" FORCE)
-        set(USE_SSE OFF CACHE BOOL "Enable SSE for GCC/Clang" FORCE)
-        set(USE_SSE2 OFF CACHE BOOL "Enable SSE2 for GCC/Clang" FORCE)
-        set(USE_SSE3 OFF CACHE BOOL "Enable SSE3 for GCC/Clang" FORCE)
-        set(USE_SSE4 OFF CACHE BOOL "Enable SSE4 for GCC/Clang" FORCE)
-    else()
-        set(USE_AVX ON CACHE BOOL "Enable AVX for GCC/Clang")
-    endif()
-
-    # warning options
-    set(EXTRA_C_FLAGS "${EXTRA_C_FLAGS} -Wall")
-    # suppress warnings: ignoring attributes on template argument '__m256 {aka __vector(8) float}'
-    set(EXTRA_C_FLAGS "${EXTRA_C_FLAGS} -Wno-ignored-attributes") 
-    if(WARNINGS_ARE_ERRORS)
-        set(EXTRA_C_FLAGS "${EXTRA_C_FLAGS} -Werror")
-    endif()
-
-    # -Wno-long-long is required in 64bit systems when including sytem headers
-    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES x86_64* OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES amd64*)
-		set(EXTRA_C_FLAGS "${EXTRA_C_FLAGS} -Wno-long-long")
-    endif()
-
-    # apply options
-    if(NOT ENABLE_PROFILING AND USE_OMIT_FRAME_POINTER)
-        set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -fomit-frame-pointer")
-    endif()
-    if(USE_O2)
-        set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -O2")
-    endif()
-    if(USE_O3)
-        set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -O3")
-    endif()
-    if(USE_FAST_MATH)
-        set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -ffast-math")
-    endif()
-    if(USE_POWERPC)
-        set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -mcpu=G3 -mtune=G5")
-    endif()
-
-    # apply vectorization
-    if(USE_MMX)
-        set(VECTORIAL_INSTRUCTIONS "${VECTORIAL_INSTRUCTIONS} -mmmx")
-        add_definitions(-DUSE_MMX)
-    endif()
-    if(USE_SSE)
-        set(VECTORIAL_INSTRUCTIONS "${VECTORIAL_INSTRUCTIONS} -msse")
-        add_definitions(-DUSE_SSE)
-    endif()
-    if(USE_SSE2)
-        set(VECTORIAL_INSTRUCTIONS "${VECTORIAL_INSTRUCTIONS} -msse2")
-        add_definitions(-DUSE_SSE2)
-    endif()
-    if(USE_SSE3 AND NOT MINGW)
-        set(VECTORIAL_INSTRUCTIONS "${VECTORIAL_INSTRUCTIONS} -msse3")
-        add_definitions(-DUSE_SSE3)
-    endif()
-    if(USE_SSE4 AND NOT MINGW)
-        set(VECTORIAL_INSTRUCTIONS "${VECTORIAL_INSTRUCTIONS} -msse4.1")
-        add_definitions(-DUSE_SSE4)
-    endif()
-    IF(USE_AVX) 
-        set(VECTORIAL_INSTRUCTIONS "${VECTORIAL_INSTRUCTIONS} -mavx")
-        add_definitions(-DUSE_AVX)
-    endif()
-
-    if(ENABLE_PROFILING)
-        set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -pg -g")
-    else()
-        if(NOT APPLE)
-            set(EXTRA_C_FLAGS "${EXTRA_C_FLAGS} -ffunction-sections")
-        endif()
-    endif()
-
-    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES armv7l)
-        set(EXTRA_C_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE}")
-    endif()
-
-    set(CMAKE_CXX_FLAGS "${VECTORIAL_INSTRUCTIONS} ${EXTRA_C_FLAGS} -std=c++11 ")
-    set(CMAKE_CXX_FLAGS_RELEASE "${EXTRA_C_FLAGS_RELEASE} -DNDEBUG -D_NDEBUG")
-    set(CMAKE_CXX_FLAGS_DEBUG "-g3 -DDEBUG -D_DEBUG")
-    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g3 -DDEBUG -D_DEBUG")
-else()
-    add_definitions(-DNOMINMAX)
-endif()
-
 find_package(OpenMP)
 if(OPENMP_FOUND)
     add_compile_options(-DUSE_OPENMP)
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}${OpenMP_C_FLAGS}")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}${OpenMP_CXX_FLAGS}")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
 endif()
 
-set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}${CMAKE_CXX_FLAGS}")
-set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}${CMAKE_CXX_FLAGS}")
-set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}${CMAKE_CXX_FLAGS}")
+set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS}")
+set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS}")
+set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${CMAKE_CXX_FLAGS}")
 
 set(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} ${EXTRA_EXE_LINKER_FLAGS})
 set(CMAKE_EXE_LINKER_FLAGS_RELEASE ${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${EXTRA_EXE_LINKER_FLAGS_RELEASE})
